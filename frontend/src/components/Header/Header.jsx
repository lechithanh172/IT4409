import React, { useState, useRef, useEffect } from 'react';
import { Link, NavLink, useNavigate } from 'react-router-dom';
// Gi·∫£ s·ª≠ b·∫°n v·∫´n d√πng CartContext ƒë·ªÉ l·∫•y cartItemCount
import { useCart } from '../../contexts/CartContext';
import Button from '../Button/Button'; // Import Button component
import styles from './Header.module.css'; // Import CSS Module
import useClickOutside from '../../hooks/useClickOutside'; // Import hook click outside

// Import icons
import {
  FiShoppingCart,
  FiSearch,
  FiUser,         // Icon m·∫∑c ƒë·ªãnh khi ch∆∞a ƒëƒÉng nh·∫≠p
  FiMenu,
  FiX,
  FiChevronDown,
  FiLogOut,
  FiBox,          // Icon cho ƒë∆°n h√†ng
  FiUserCheck     // Icon khi ƒë√£ ƒëƒÉng nh·∫≠p
} from 'react-icons/fi'; // S·ª≠ d·ª•ng Feather Icons

const Header = () => {
  // L·∫•y d·ªØ li·ªáu gi·ªè h√†ng t·ª´ CartContext
  const { cartItemCount } = useCart();
  // Hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
  const navigate = useNavigate();

  // --- STATE QU·∫¢N L√ù TR·∫†NG TH√ÅI GI·∫¢ L·∫¨P ƒêƒÇNG NH·∫¨P C·ª§C B·ªò ---
  // D√πng state n√†y ƒë·ªÉ demo giao di·ªán khi ƒëƒÉng nh·∫≠p/ch∆∞a ƒëƒÉng nh·∫≠p
  const [isLoggedIn, setIsLoggedIn] = useState(false); // Ban ƒë·∫ßu l√† ch∆∞a ƒëƒÉng nh·∫≠p
  // T√™n ng∆∞·ªùi d√πng gi·∫£ l·∫≠p, b·∫°n c√≥ th·ªÉ ƒë·ªïi
  const [userName, setUserName] = useState('Tran Duc');

  // --- State qu·∫£n l√Ω UI kh√°c c·ªßa Header ---
  const [searchTerm, setSearchTerm] = useState(''); // N·ªôi dung √¥ t√¨m ki·∫øm
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false); // Tr·∫°ng th√°i m·ªü/ƒë√≥ng menu mobile
  const [isCategoryDropdownOpen, setIsCategoryDropdownOpen] = useState(false); // Tr·∫°ng th√°i m·ªü/ƒë√≥ng dropdown danh m·ª•c
  const [isUserDropdownOpen, setIsUserDropdownOpen] = useState(false); // Tr·∫°ng th√°i m·ªü/ƒë√≥ng dropdown ng∆∞·ªùi d√πng

  // --- REFS ƒë·ªÉ x·ª≠ l√Ω click outside ---
  const categoryDropdownRef = useRef(null); // Ref cho dropdown danh m·ª•c
  const userDropdownRef = useRef(null);     // Ref cho dropdown ng∆∞·ªùi d√πng
  const mobileMenuRef = useRef(null);       // Ref cho menu mobile (n·∫øu c·∫ßn ƒë√≥ng khi click ngo√†i)

  // --- S·ª¨ D·ª§NG HOOK useClickOutside ---
  // ƒê√≥ng dropdown danh m·ª•c khi click ra ngo√†i n√≥
  useClickOutside(categoryDropdownRef, () => setIsCategoryDropdownOpen(false));
  // ƒê√≥ng dropdown ng∆∞·ªùi d√πng khi click ra ngo√†i n√≥
  useClickOutside(userDropdownRef, () => setIsUserDropdownOpen(false));
  // ƒê√≥ng menu mobile khi click ra ngo√†i (t√πy ch·ªçn)
  // useClickOutside(mobileMenuRef, () => setIsMobileMenuOpen(false));

  // --- HANDLERS (H√†m x·ª≠ l√Ω s·ª± ki·ªán) ---

  // C·∫≠p nh·∫≠t state searchTerm khi g√µ v√†o √¥ t√¨m ki·∫øm
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  // X·ª≠ l√Ω khi submit form t√¨m ki·∫øm
  const handleSearchSubmit = (e) => {
    e.preventDefault(); // NgƒÉn trang reload
    if (searchTerm.trim()) { // Ch·ªâ t√¨m khi c√≥ n·ªôi dung (ƒë√£ b·ªè kho·∫£ng tr·∫Øng th·ª´a)
      // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang k·∫øt qu·∫£ t√¨m ki·∫øm (v√≠ d·ª•: /search?q=keyword)
      navigate(`/search?q=${encodeURIComponent(searchTerm.trim())}`);
      setSearchTerm(''); // X√≥a n·ªôi dung √¥ t√¨m ki·∫øm
      closeAllDropdowns(); // ƒê√≥ng c√°c menu/dropdown ƒëang m·ªü
    }
  };

  // ƒê√≥ng/m·ªü menu mobile
  const toggleMobileMenu = () => {
    setIsMobileMenuOpen(!isMobileMenuOpen);
    // ƒê√≥ng c√°c dropdown kh√°c khi m·ªü menu mobile
    setIsCategoryDropdownOpen(false);
    setIsUserDropdownOpen(false);
  };

  // ƒê√≥ng/m·ªü dropdown danh m·ª•c
  const toggleCategoryDropdown = () => {
    setIsCategoryDropdownOpen(!isCategoryDropdownOpen);
    setIsUserDropdownOpen(false); // ƒê√≥ng dropdown user n·∫øu ƒëang m·ªü
  };

  // ƒê√≥ng/m·ªü dropdown ng∆∞·ªùi d√πng
  const toggleUserDropdown = () => {
    setIsUserDropdownOpen(!isUserDropdownOpen);
    setIsCategoryDropdownOpen(false); // ƒê√≥ng dropdown danh m·ª•c n·∫øu ƒëang m·ªü
  };

  // --- H√ÄM GI·∫¢ L·∫¨P & CHUY·ªÇN H∆Ø·ªöNG AUTH ---
  // X·ª≠ l√Ω khi nh·∫•n n√∫t ƒêƒÉng xu·∫•t (gi·∫£ l·∫≠p)
  const handleLogout = () => {
    setIsLoggedIn(false); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i ƒëƒÉng nh·∫≠p l√† false
    setIsUserDropdownOpen(false); // ƒê√≥ng dropdown
    // C√≥ th·ªÉ chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß n·∫øu mu·ªën
    // navigate('/');
    console.log("ƒê√£ ƒëƒÉng xu·∫•t (gi·∫£ l·∫≠p)");
  };

   // H√†m ti·ªán √≠ch ƒë√≥ng t·∫•t c·∫£ dropdown/menu
   const closeAllDropdowns = () => {
    setIsMobileMenuOpen(false);
    setIsCategoryDropdownOpen(false);
    setIsUserDropdownOpen(false);
  };

   // H√†m ƒë√≥ng menu mobile khi click v√†o link b√™n trong
   const handleMobileLinkClick = () => {
       setIsMobileMenuOpen(false);
   }

   // H√†m chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒêƒÉng nh·∫≠p
   const handleLoginClick = () => {
    closeAllDropdowns(); // ƒê√≥ng menu/dropdown
    navigate('/login'); // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang /login
 };

 // H√†m chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒêƒÉng k√Ω
 const handleSignupClick = () => {
    closeAllDropdowns(); // ƒê√≥ng menu/dropdown
    navigate('/signup'); // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang /signup
 };
 // --- K·∫æT TH√öC HANDLERS ---


  // --- RENDER COMPONENT ---
  return (
    <header className={styles.header}>
      <div className={styles.container}>
        {/* === Logo === */}
        <Link to="/" className={styles.logo} onClick={closeAllDropdowns}>
          MyEshop
        </Link>

        {/* === Desktop Navigation === */}
        <nav className={styles.desktopNav}>
          {/* Link Trang Ch·ªß */}
          <NavLink to="/" className={({ isActive }) => isActive ? `${styles.navLink} ${styles.active}` : styles.navLink} end>
            Trang Ch·ªß
          </NavLink>

          {/* --- Dropdown Danh M·ª•c --- */}
          <div className={styles.dropdownContainer} ref={categoryDropdownRef}>
            <button onClick={toggleCategoryDropdown} className={`${styles.navLink} ${styles.dropdownToggle}`}>
              Danh M·ª•c <FiChevronDown className={`${styles.chevronIcon} ${isCategoryDropdownOpen ? styles.chevronOpen : ''}`} />
            </button>
            {/* N·ªôi dung dropdown ch·ªâ hi·ªán khi isCategoryDropdownOpen l√† true */}
            {isCategoryDropdownOpen && (
              <div className={`${styles.dropdownMenu} ${styles.categoryDropdown}`}>
                <Link to="/products?category=Smartphone" className={styles.dropdownItem} onClick={toggleCategoryDropdown}>
                  <span className={styles.categoryEmoji}>üì±</span> Smartphones
                </Link>
                <Link to="/products?category=Laptop" className={styles.dropdownItem} onClick={toggleCategoryDropdown}>
                 <span className={styles.categoryEmoji}>üíª</span> Laptops
                </Link>
                <Link to="/products" className={styles.dropdownItem} onClick={toggleCategoryDropdown}>
                   T·∫•t c·∫£ s·∫£n ph·∫©m
                </Link>
              </div>
            )}
          </div>

          {/* Link Khuy·∫øn M√£i */}
           <NavLink to="/promotions" className={({ isActive }) => isActive ? `${styles.navLink} ${styles.active}` : styles.navLink}>
            Khuy·∫øn M√£i
          </NavLink>
        </nav>

        {/* === Khu v·ª±c Actions (Search, Cart, Auth) === */}
        <div className={styles.actions}>
          {/* --- Search Bar --- */}
          <form onSubmit={handleSearchSubmit} className={styles.searchBar}>
            <input
              type="text"
              placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
              className={styles.searchInput}
              value={searchTerm}
              onChange={handleSearchChange}
              aria-label="T√¨m ki·∫øm s·∫£n ph·∫©m"
            />
            <button type="submit" className={styles.searchButton} aria-label="T√¨m ki·∫øm">
              <FiSearch />
            </button>
          </form>

          {/* --- N√∫t Gi·ªè h√†ng --- */}
          <Link to="/cart" className={styles.actionButton} title="Gi·ªè h√†ng" onClick={closeAllDropdowns}>
            <FiShoppingCart />
            {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ch·ªâ khi l·ªõn h∆°n 0 */}
            {cartItemCount > 0 && (
              <span className={styles.cartCount}>{cartItemCount}</span>
            )}
          </Link>

          {/* --- Auth / User Menu (Cho Desktop) --- */}
          <div className={styles.desktopAuth}>
            {/* Ki·ªÉm tra state isLoggedIn gi·∫£ l·∫≠p */}
            {isLoggedIn ? (
              // --- Khi ƒê√£ ƒêƒÉng Nh·∫≠p ---
              <div className={styles.dropdownContainer} ref={userDropdownRef}>
                <button onClick={toggleUserDropdown} className={`${styles.actionButton} ${styles.userButton}`} title="T√†i kho·∫£n">
                  <FiUserCheck /> {/* Icon user ƒë√£ ƒëƒÉng nh·∫≠p */}
                  {/* C√≥ th·ªÉ hi·ªÉn th·ªã t√™n ng·∫Øn ·ªü ƒë√¢y n·∫øu mu·ªën */}
                  {/* <span className={styles.userNameDesktop}>{userName}</span> */}
                   <FiChevronDown className={`${styles.chevronIcon} ${styles.userChevron} ${isUserDropdownOpen ? styles.chevronOpen : ''}`} />
                </button>
                {/* Dropdown menu ng∆∞·ªùi d√πng */}
                {isUserDropdownOpen && (
                  <div className={`${styles.dropdownMenu} ${styles.userDropdown}`}>
                    {/* Ch√†o m·ª´ng */}
                    <div className={styles.dropdownHeader}>Ch√†o, {userName}!</div>
                    {/* Link H·ªì s∆° */}
                    <Link to="/profile" className={styles.dropdownItem} onClick={toggleUserDropdown}>
                       <FiUser className={styles.dropdownIcon}/> H·ªì s∆°
                    </Link>
                    {/* Link ƒê∆°n h√†ng */}
                    <Link to="/orders" className={styles.dropdownItem} onClick={toggleUserDropdown}>
                       <FiBox className={styles.dropdownIcon}/> ƒê∆°n h√†ng
                    </Link>
                    {/* N√∫t ƒêƒÉng xu·∫•t */}
                    <button onClick={handleLogout} className={`${styles.dropdownItem} ${styles.logoutButton}`}>
                      <FiLogOut className={styles.dropdownIcon}/> ƒêƒÉng xu·∫•t
                    </button>
                  </div>
                )}
              </div>
            ) : (
              // --- Khi Ch∆∞a ƒêƒÉng Nh·∫≠p ---
              <>
                {/* N√∫t ƒêƒÉng nh·∫≠p */}
                <Button variant="secondary" size="small" onClick={handleLoginClick} className={styles.authButton}>
                  ƒêƒÉng nh·∫≠p
                </Button>
                {/* N√∫t ƒêƒÉng k√Ω */}
                <Button variant="primary" size="small" onClick={handleSignupClick} className={styles.authButton}>
                  ƒêƒÉng k√Ω
                </Button>
              </>
            )}
          </div>

          {/* --- N√∫t b·∫≠t/t·∫Øt Menu Mobile --- */}
          <button className={styles.mobileMenuToggle} onClick={toggleMobileMenu} aria-label={isMobileMenuOpen ? "ƒê√≥ng menu" : "M·ªü menu"}>
            {/* Hi·ªÉn th·ªã icon X ho·∫∑c Hamburger t√πy tr·∫°ng th√°i */}
            {isMobileMenuOpen ? <FiX /> : <FiMenu />}
          </button>
        </div>
      </div>

      {/* === Mobile Menu Drawer (Thanh menu tr∆∞·ª£t ra t·ª´ b√™n ph·∫£i) === */}
      <nav ref={mobileMenuRef} className={`${styles.mobileMenu} ${isMobileMenuOpen ? styles.mobileMenuOpen : ''}`}>
        {/* Header c·ªßa menu mobile */}
        <div className={styles.mobileMenuHeader}>
          <span className={styles.mobileMenuTitle}>Menu</span>
          <button onClick={toggleMobileMenu} className={styles.closeButton} aria-label="ƒê√≥ng menu">
            <FiX />
          </button>
        </div>

        {/* --- Th√¥ng tin User ho·∫∑c N√∫t Auth trong Mobile Menu --- */}
        <div className={styles.mobileUserInfo}>
           {/* Ki·ªÉm tra state isLoggedIn gi·∫£ l·∫≠p */}
           {isLoggedIn ? (
             // --- Khi ƒê√£ ƒêƒÉng Nh·∫≠p (Mobile) ---
             <>
                <div className={styles.mobileWelcome}>
                  <FiUserCheck className={styles.mobileUserIcon}/> Ch√†o, {userName}!
                </div>
                <Link to="/profile" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>H·ªì s∆°</Link>
                <Link to="/orders" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>ƒê∆°n h√†ng</Link>
                {/* N√∫t ƒëƒÉng xu·∫•t */}
                <button onClick={() => {handleLogout(); handleMobileLinkClick();}} className={`${styles.mobileNavLink} ${styles.mobileLogoutButton}`}>ƒêƒÉng xu·∫•t</button>
             </>
           ) : (
             // --- Khi Ch∆∞a ƒêƒÉng Nh·∫≠p (Mobile) ---
             <div className={styles.mobileAuthButtons}>
                 <Button variant="primary" onClick={() => { handleLoginClick(); handleMobileLinkClick(); }} className={styles.mobileAuthBtn}>ƒêƒÉng nh·∫≠p</Button>
                 <Button variant="secondary" onClick={() => { handleSignupClick(); handleMobileLinkClick(); }} className={styles.mobileAuthBtn}>ƒêƒÉng k√Ω</Button>
             </div>
           )}
        </div>

        {/* ƒê∆∞·ªùng k·∫ª ngang ph√¢n c√°ch */}
        <hr className={styles.mobileMenuDivider} />

        {/* --- C√°c Link ch√≠nh trong Mobile Menu --- */}
        <Link to="/" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>Trang Ch·ªß</Link>

        {/* --- Danh m·ª•c trong Mobile Menu --- */}
        <div className={styles.mobileCategorySection}>
             <div className={styles.mobileNavGroupTitle}>Danh M·ª•c</div>
            <Link to="/products?category=Smartphone" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>üì± Smartphones</Link>
            <Link to="/products?category=Laptop" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>üíª Laptops</Link>
            <Link to="/products" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>T·∫•t c·∫£ s·∫£n ph·∫©m</Link>
        </div>

         {/* ƒê∆∞·ªùng k·∫ª ngang */}
         <hr className={styles.mobileMenuDivider} />

         {/* --- C√°c Link kh√°c --- */}
          <Link to="/promotions" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>Khuy·∫øn M√£i</Link>
          {/* Th√™m c√°c link kh√°c n·∫øu c·∫ßn */}

      </nav>
       {/* L·ªõp ph·ªß m√†u ƒëen m·ªù khi menu mobile m·ªü */}
       {isMobileMenuOpen && <div className={styles.overlay} onClick={toggleMobileMenu}></div>}
    </header>
  );
};

export default Header;