import React, { useState, useRef, useEffect } from 'react'; // Th√™m useEffect n·∫øu c·∫ßn
import { Link, NavLink, useNavigate } from 'react-router-dom';
// Gi·∫£ s·ª≠ b·∫°n v·∫´n d√πng CartContext ƒë·ªÉ l·∫•y cartItemCount
import { useCart } from '../../contexts/CartContext';
import { useAuth } from '../../contexts/AuthContext'; // *** IMPORT useAuth ***
import Button from '../Button/Button'; // Import Button component
import styles from './Header.module.css'; // Import CSS Module
import useClickOutside from '../../hooks/useClickOutside'; // Import hook click outside

// Import icons
import {
  FiShoppingCart,
  FiSearch,
  FiUser,         // Icon m·∫∑c ƒë·ªãnh khi ch∆∞a ƒëƒÉng nh·∫≠p
  FiMenu,
  FiX,
  FiChevronDown,
  FiLogOut,
  FiBox,          // Icon cho ƒë∆°n h√†ng
  FiUserCheck,    // Icon khi ƒë√£ ƒëƒÉng nh·∫≠p
  FiLogIn         // Icon cho n√∫t ƒëƒÉng nh·∫≠p (t√πy ch·ªçn)
} from 'react-icons/fi'; // S·ª≠ d·ª•ng Feather Icons

const Header = () => {
  // L·∫•y d·ªØ li·ªáu gi·ªè h√†ng
  const { cartItemCount } = useCart();
  // *** L·∫§Y D·ªÆ LI·ªÜU AUTH T·ª™ CONTEXT ***
  const { user, isAuthenticated, logout } = useAuth();
  // Hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
  const navigate = useNavigate();

  // --- B·ªé STATE GI·∫¢ L·∫¨P ---
  // const [isLoggedIn, setIsLoggedIn] = useState(false);
  // const [userName, setUserName] = useState('User Name');

  // --- State qu·∫£n l√Ω UI c·ªßa Header ---
  const [searchTerm, setSearchTerm] = useState('');
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isCategoryDropdownOpen, setIsCategoryDropdownOpen] = useState(false);
  const [isUserDropdownOpen, setIsUserDropdownOpen] = useState(false);

  // --- REFS ---
  const categoryDropdownRef = useRef(null);
  const userDropdownRef = useRef(null);
  const mobileMenuRef = useRef(null);

  // --- HOOKS ---
  useClickOutside(categoryDropdownRef, () => setIsCategoryDropdownOpen(false));
  useClickOutside(userDropdownRef, () => setIsUserDropdownOpen(false));

  // --- HANDLERS ---
  const handleSearchChange = (e) => setSearchTerm(e.target.value);
  const handleSearchSubmit = (e) => {
    e.preventDefault();
    if (searchTerm.trim()) {
      navigate(`/search?q=${encodeURIComponent(searchTerm.trim())}`);
      setSearchTerm('');
      closeAllDropdowns();
    }
  };
  const toggleMobileMenu = () => {
      setIsMobileMenuOpen(!isMobileMenuOpen);
      setIsCategoryDropdownOpen(false);
      setIsUserDropdownOpen(false);
  };
  const toggleCategoryDropdown = () => {
      setIsCategoryDropdownOpen(!isCategoryDropdownOpen);
      setIsUserDropdownOpen(false);
  };
  const toggleUserDropdown = () => {
      setIsUserDropdownOpen(!isUserDropdownOpen);
      setIsCategoryDropdownOpen(false);
  };
  const closeAllDropdowns = () => {
      setIsMobileMenuOpen(false);
      setIsCategoryDropdownOpen(false);
      setIsUserDropdownOpen(false);
  };
  const handleMobileLinkClick = () => setIsMobileMenuOpen(false);

   // --- H√ÄM CHUY·ªÇN H∆Ø·ªöNG ƒê·∫æN AUTH PAGES ---
   const handleLoginClick = () => {
    closeAllDropdowns();
    navigate('/login');
 };
 const handleSignupClick = () => {
    closeAllDropdowns();
    navigate('/signup');
 };

  // --- H√ÄM LOGOUT (G·ªçi t·ª´ Context)---
  const handleLogout = () => {
    logout(); // *** G·ªåI H√ÄM LOGOUT T·ª™ AUTHCONTEXT ***
    setIsUserDropdownOpen(false); // ƒê√≥ng dropdown sau khi logout
    // navigate('/'); // Kh√¥ng c·∫ßn navigate ·ªü ƒë√¢y n·∫øu ProtectedRoute x·ª≠ l√Ω t·ªët
    console.log("ƒê√£ g·ªçi h√†m logout t·ª´ context");
  };
 // --- K·∫æT TH√öC HANDLERS ---


  // --- RENDER COMPONENT ---
  // L·∫•y t√™n hi·ªÉn th·ªã t·ª´ user object trong context
  const displayName = user?.firstName || user?.username || 'T√†i kho·∫£n'; // ∆Øu ti√™n firstName, r·ªìi ƒë·∫øn username

  return (
    <header className={styles.header}>
      <div className={styles.container}>
        {/* === Logo === */}
        <Link to="/" className={styles.logo} onClick={closeAllDropdowns}>MyEshop</Link>

        {/* === Desktop Navigation === */}
        <nav className={styles.desktopNav}>
             {/* ... c√°c NavLink ... */}
             <NavLink to="/" className={({ isActive }) => isActive ? `${styles.navLink} ${styles.active}` : styles.navLink} end>Trang Ch·ªß</NavLink>
              <div className={styles.dropdownContainer} ref={categoryDropdownRef}>
                <button onClick={toggleCategoryDropdown} className={`${styles.navLink} ${styles.dropdownToggle}`}>Danh M·ª•c <FiChevronDown className={`${styles.chevronIcon} ${isCategoryDropdownOpen ? styles.chevronOpen : ''}`} /></button>
                {isCategoryDropdownOpen && (
                  <div className={`${styles.dropdownMenu} ${styles.categoryDropdown}`}>
                    <Link to="/products?category=Smartphone" className={styles.dropdownItem} onClick={toggleCategoryDropdown}><span className={styles.categoryEmoji}>üì±</span> Smartphones</Link>
                    <Link to="/products?category=Laptop" className={styles.dropdownItem} onClick={toggleCategoryDropdown}><span className={styles.categoryEmoji}>üíª</span> Laptops</Link>
                    <Link to="/products" className={styles.dropdownItem} onClick={toggleCategoryDropdown}>T·∫•t c·∫£ s·∫£n ph·∫©m</Link>
                  </div>
                )}
              </div>
              <NavLink to="/promotions" className={({ isActive }) => isActive ? `${styles.navLink} ${styles.active}` : styles.navLink}>Khuy·∫øn M√£i</NavLink>
        </nav>

        {/* === Khu v·ª±c Actions === */}
        <div className={styles.actions}>
          {/* Search Bar */}
          <form onSubmit={handleSearchSubmit} className={styles.searchBar}>
            <input type="text" placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..." className={styles.searchInput} value={searchTerm} onChange={handleSearchChange} aria-label="T√¨m ki·∫øm s·∫£n ph·∫©m"/>
            <button type="submit" className={styles.searchButton} aria-label="T√¨m ki·∫øm"><FiSearch /></button>
          </form>

          {/* N√∫t Gi·ªè h√†ng */}
          <Link to="/cart" className={styles.actionButton} title="Gi·ªè h√†ng" onClick={closeAllDropdowns}>
            <FiShoppingCart />
            {cartItemCount > 0 && (<span className={styles.cartCount}>{cartItemCount}</span>)}
          </Link>

          {/* --- Auth / User Menu (Desktop) --- */}
          <div className={styles.desktopAuth}>
            {/* *** KI·ªÇM TRA isAuthenticated T·ª™ AUTHCONTEXT *** */}
            {isAuthenticated ? (
              // --- Khi ƒê√£ ƒêƒÉng Nh·∫≠p ---
              <div className={styles.dropdownContainer} ref={userDropdownRef}>
                <button onClick={toggleUserDropdown} className={`${styles.actionButton} ${styles.userButton}`} title={displayName}>
                  <FiUserCheck />
                  {/* Hi·ªÉn th·ªã username ho·∫∑c t√™n */}
                  <span className={styles.userNameDesktop}>{displayName}</span>
                  <FiChevronDown className={`${styles.chevronIcon} ${styles.userChevron} ${isUserDropdownOpen ? styles.chevronOpen : ''}`} />
                </button>
                {/* Dropdown menu ng∆∞·ªùi d√πng */}
                {isUserDropdownOpen && (
                  <div className={`${styles.dropdownMenu} ${styles.userDropdown}`}>
                    {/* Ch√†o m·ª´ng v·ªõi t√™n */}
                    <div className={styles.dropdownHeader}>Ch√†o, {displayName}!</div>
                    <Link to="/profile" className={styles.dropdownItem} onClick={toggleUserDropdown}><FiUser className={styles.dropdownIcon}/> H·ªì s∆°</Link>
                    <Link to="/orders" className={styles.dropdownItem} onClick={toggleUserDropdown}><FiBox className={styles.dropdownIcon}/> ƒê∆°n h√†ng</Link>
                    {/* N√∫t ƒêƒÉng xu·∫•t g·ªçi handleLogout */}
                    <button onClick={handleLogout} className={`${styles.dropdownItem} ${styles.logoutButton}`}><FiLogOut className={styles.dropdownIcon}/> ƒêƒÉng xu·∫•t</button>
                  </div>
                )}
              </div>
            ) : (
              // --- Khi Ch∆∞a ƒêƒÉng Nh·∫≠p ---
              <>
                <Button variant="secondary" size="small" onClick={handleLoginClick} className={styles.authButton}><FiLogIn /> ƒêƒÉng nh·∫≠p</Button>
                <Button variant="primary" size="small" onClick={handleSignupClick} className={styles.authButton}>ƒêƒÉng k√Ω</Button>
              </>
            )}
          </div>

          {/* N√∫t b·∫≠t/t·∫Øt Menu Mobile */}
          <button className={styles.mobileMenuToggle} onClick={toggleMobileMenu} aria-label={isMobileMenuOpen ? "ƒê√≥ng menu" : "M·ªü menu"}>
            {isMobileMenuOpen ? <FiX /> : <FiMenu />}
          </button>
        </div>
      </div>

      {/* Mobile Menu Drawer */}
      <nav ref={mobileMenuRef} className={`${styles.mobileMenu} ${isMobileMenuOpen ? styles.mobileMenuOpen : ''}`}>
         <div className={styles.mobileMenuHeader}>
              <span className={styles.mobileMenuTitle}>Menu</span>
              <button onClick={toggleMobileMenu} className={styles.closeButton} aria-label="ƒê√≥ng menu"><FiX /></button>
         </div>

         {/* Th√¥ng tin User ho·∫∑c N√∫t Auth trong Mobile Menu */}
         <div className={styles.mobileUserInfo}>
            {/* *** KI·ªÇM TRA isAuthenticated *** */}
           {isAuthenticated ? (
             <>
                <div className={styles.mobileWelcome}><FiUserCheck className={styles.mobileUserIcon}/> Ch√†o, {displayName}!</div>
                <Link to="/profile" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>H·ªì s∆°</Link>
                <Link to="/orders" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>ƒê∆°n h√†ng</Link>
                <button onClick={() => { handleLogout(); handleMobileLinkClick(); }} className={`${styles.mobileNavLink} ${styles.mobileLogoutButton}`}>ƒêƒÉng xu·∫•t</button>
             </>
           ) : (
             <div className={styles.mobileAuthButtons}>
                 <Button variant="primary" onClick={() => { handleLoginClick(); handleMobileLinkClick(); }} className={styles.mobileAuthBtn}>ƒêƒÉng nh·∫≠p</Button>
                 <Button variant="secondary" onClick={() => { handleSignupClick(); handleMobileLinkClick(); }} className={styles.mobileAuthBtn}>ƒêƒÉng k√Ω</Button>
             </div>
           )}
        </div>

        <hr className={styles.mobileMenuDivider} />
         {/* ... C√°c link kh√°c ... */}
         <Link to="/" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>Trang Ch·ªß</Link>
         <div className={styles.mobileCategorySection}>
            <div className={styles.mobileNavGroupTitle}>Danh M·ª•c</div>
            <Link to="/products?category=Smartphone" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>üì± Smartphones</Link>
            <Link to="/products?category=Laptop" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>üíª Laptops</Link>
            <Link to="/products" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>T·∫•t c·∫£ s·∫£n ph·∫©m</Link>
        </div>
        <hr className={styles.mobileMenuDivider} />
        <Link to="/promotions" className={styles.mobileNavLink} onClick={handleMobileLinkClick}>Khuy·∫øn M√£i</Link>
      </nav>
       {isMobileMenuOpen && <div className={styles.overlay} onClick={toggleMobileMenu}></div>}
    </header>
  );
};

export default Header;